# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow: 
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/GoogleCloudPlatform/github-actions/tree/master/example-workflows/gke

name: Build and Deploy to GKE

on:
  release:
    types: [created]
  push:
    branches: [master]
    
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1-c	  # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-awacs-deployment # TODO: update to deployment name
  IMAGE: ${{ github.event.repository.name }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker
    # Get the GKE credentials so we can deploy to the cluster
    - run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
    # Build the Docker image
    - name: Build
      run: |-
        mvn -B clean package -DskipTests=true
        ls -lrta target/
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:latest" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
        echo "confirming latest lag points to a baked image -"
        docker image ls "gcr.io/$PROJECT_ID/$IMAGE:latest"
  
    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    - name: Deploy GKE Workloads
      run: |-
        # ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        #./kustomize build . | kubectl apply -f -
        # kubectl rollout status deployment/$DEPLOYMENT_NAME
        # kubectl delete service clusterip authserver
        kubectl create deployment db --image=mysql --dry-run -o=yaml > db.yaml
        echo "---" >> db.yaml # i am new to these things
        kubectl create service clusterip db --tcp=3306:3306 --dry-run -o=yaml >> db.yaml
        kubectl apply -f db.yml
	echo "-----------------------db.yml------------------------"
	cat db.yml
	echo "-----------------------------------------------------"
	
	kubectl create deployment authserver --image=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA --dry-run -o=yaml > authserver.yaml
        echo "---" >> authserver.yaml # i am new to these things
        kubectl create service clusterip authserver --tcp=8100:8100 --dry-run -o=yaml >> authserver.yaml
        echo "-----------------------------------------------"
        kubectl apply -f authserver.yaml
        echo "-----------------------------------------------"
        cat authserver.yaml
        echo "-----------------------------------------------"
	kubectl expose service authserver --ingress app.aiocdawacs.com --tls-acme
	kubectl create ingress authserver --host app.aiocdawacs.com --tls-acme

        # kubectl get all
        # kubectl delete rs --all
        echo "-----------------------------------------------"
        # kubectl get services -o wide
        echo "-----------------------------------------------"
        # kubectl get all
        echo "-------------------------------------------------"
      
